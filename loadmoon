fask = task
local HttpService = game:GetService("HttpService")
local AllIDs = {}
local actualHour = os.date("!*t").hour

-- ƒê·ªçc file tr√°nh tr√πng l·∫∑p JobId
local success = pcall(function()
	AllIDs = HttpService:JSONDecode(readfile("moonsever.json"))
end)

if not success then
	table.insert(AllIDs, actualHour)
	writefile("moonsever.json", HttpService:JSONEncode(AllIDs))
end

-- Ghi ƒë√® duy nh·∫•t 1 server Full Moon
local function SaveFullMoonServer()
	local jobId = game.JobId
	local placeId = game.PlaceId
	local serverInfo = {
		jobId = jobId,
		placeId = placeId,
		timestamp = os.time()
	}

	writefile("helpfullmoon.json", HttpService:JSONEncode({serverInfo}))
	print("üîî Full Moon detected! Saved to helpfullmoon.json")
end

-- L·∫•y server t·ª´ API
function TPReturner()
	local response = game:HttpGet("http://localhost:3000/JobData/full-moon")
	local data = HttpService:JSONDecode(response)

	for _, job in pairs(data.jobs) do
		local jobId = tostring(job.jobId)
		local playerCount = tonumber(job.playerCount) or 0
		local maxPlayers = 4

		local isNew = true
		local num = 0

		for _, existing in pairs(AllIDs) do
			if num ~= 0 then
				if jobId == tostring(existing) then
					isNew = false
				end
			else
				if tonumber(actualHour) ~= tonumber(existing) then
					pcall(function()
						delfile("moonsever.json")
						AllIDs = {}
						table.insert(AllIDs, actualHour)
					end)
				end
			end
			num = num + 1
		end

		if isNew and playerCount < maxPlayers then
			table.insert(AllIDs, jobId)
			fask.wait()

			pcall(function()
				writefile("moonsever.json", HttpService:JSONEncode(AllIDs))
				fask.wait()

				local TeleportService = game:GetService("TeleportService")
				local placeId = game.PlaceId
				local player = game.Players.LocalPlayer
				TeleportService:TeleportToPlaceInstance(placeId, jobId, player)
			end)

			fask.wait(0.5)
		end
	end
end

-- L·∫•y pha m·∫∑t trƒÉng
local function GetMoonPhase()
	local moonTextures = {
		["http://www.roblox.com/asset/?id=9709149431"] = "Full Moon üåï",
		["http://www.roblox.com/asset/?id=9709149052"] = "87,5%",
		["http://www.roblox.com/asset/?id=9709143733"] = "75%",
		["http://www.roblox.com/asset/?id=9709150401"] = "62,5%",
		["http://www.roblox.com/asset/?id=9709135895"] = "50%",
		["http://www.roblox.com/asset/?id=9709139597"] = "37,5%",
		["http://www.roblox.com/asset/?id=9709150086"] = "25%",
		["http://www.roblox.com/asset/?id=9709149680"] = "12,5%"
	}

	local textureId = game:GetService("Lighting").Sky.MoonTextureId

	if moonTextures[textureId] then
		print("üåô Current Moon Phase: " .. moonTextures[textureId])
		return moonTextures[textureId]
	else
		print("üåô Unknown Moon Phase")
		return nil
	end
end

-- N·∫øu kh√¥ng ph·∫£i Full Moon
local function Hop()
	print("‚ùå Not Full Moon. Hopping...")
	pcall(function()
		TPReturner()
	end)
end

-- H√†m ch√≠nh
function Teleport()
	while fask.wait(5) do
		local currentMoonPhase = GetMoonPhase()

		if currentMoonPhase == "Full Moon üåï" then
			SaveFullMoonServer()
		else
			Hop()
		end
	end
end

Teleport()
