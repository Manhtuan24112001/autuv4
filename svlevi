local fask = task
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

local AllIDs = {}
local actualHour = os.date("!*t").hour
local hopInterval = 3 * 60 * 60 -- 3 ti·∫øng
local lastHopTime = 0
local selectedServer = false

-- ƒê·ªçc file tr√°nh tr√πng l·∫∑p JobId
local success = pcall(function()
	AllIDs = HttpService:JSONDecode(readfile("moonsever.json"))
end)

if not success then
	table.insert(AllIDs, actualHour)
	writefile("moonsever.json", HttpService:JSONEncode(AllIDs))
end

-- ƒê·ªçc th·ªùi gian g·∫ßn nh·∫•t t·ª´ helpfullmoon.json
local function LoadLastHopTime()
	local ok, data = pcall(function()
		return HttpService:JSONDecode(readfile("helpfullmoon.json"))
	end)
	if ok and data and data[1] and data[1].timestamp then
		lastHopTime = tonumber(data[1].timestamp)
		return true
	else
		lastHopTime = os.time()
		return false
	end
end

-- L∆∞u server hi·ªán t·∫°i v√†o helpfullmoon.json
local function SaveChosenServer()
	local serverInfo = {
		jobId = game.JobId,
		placeId = game.PlaceId,
		timestamp = os.time()
	}
	writefile("helpfullmoon.json", HttpService:JSONEncode({serverInfo}))
	print("‚úÖ ƒê√£ l∆∞u server v√†o helpfullmoon.json. B·∫Øt ƒë·∫ßu t√≠nh 3 ti·∫øng t·ª´ b√¢y gi·ªù.")
	lastHopTime = serverInfo.timestamp
end

-- Hop sang server √≠t ng∆∞·ªùi nh·∫•t (d∆∞·ªõi 5)
local function TPReturner()
	local response = game:HttpGet("http://localhost:3000/JobData/full-moon")
	local data = HttpService:JSONDecode(response)

	for _, job in pairs(data.jobs) do
		local jobId = tostring(job.jobId)
		local playerCount = tonumber(job.playerCount) or 0

		local isNew = true
		local num = 0

		for _, existing in pairs(AllIDs) do
			if num ~= 0 then
				if jobId == tostring(existing) then
					isNew = false
				end
			else
				if tonumber(actualHour) ~= tonumber(existing) then
					pcall(function()
						delfile("moonsever.json")
						AllIDs = {}
						table.insert(AllIDs, actualHour)
					end)
				end
			end
			num = num + 1
		end

		if isNew and playerCount < 5 then
			table.insert(AllIDs, jobId)
			fask.wait()

			pcall(function()
				writefile("moonsever.json", HttpService:JSONEncode(AllIDs))
				fask.wait()
				TeleportService:TeleportToPlaceInstance(game.PlaceId, jobId, Players.LocalPlayer)
			end)

			fask.wait(0.5)
			break
		end
	end
end

-- Ki·ªÉm tra server ngay sau khi v√†o
local function InitialCheck()
	fask.delay(5, function()
		if not selectedServer then
			local currentPlayers = #Players:GetPlayers()
			print("üë• S·ªë ng∆∞·ªùi trong server hi·ªán t·∫°i:", currentPlayers)

			if currentPlayers > 5 then
				print("‚ùå Server qu√° ƒë√¥ng, ƒëang t√¨m server kh√°c...")
				TPReturner()
			else
				print("‚úÖ Server ·ªïn, d∆∞·ªõi 5 ng∆∞·ªùi.")
				selectedServer = true
				SaveChosenServer()
			end
		end
	end)
end

-- Ki·ªÉm tra ƒë·ªãnh k·ª≥ m·ªói 1 ph√∫t xem ƒë√£ ƒë·∫øn l√∫c hop ch∆∞a
local function AutoHopTimer()
	while true do
		fask.wait(60) -- m·ªói ph√∫t ki·ªÉm tra 1 l·∫ßn

		if selectedServer then
			local elapsed = os.time() - lastHopTime
			local remaining = hopInterval - elapsed

			if remaining <= 0 then
				print("‚è∞ ƒê√£ ƒë·ªß 3 ti·∫øng. ƒêang hop server m·ªõi...")
				selectedServer = false
				TPReturner()
				break
			else
				local minutes = math.floor(remaining / 60)
				local seconds = remaining % 60
				print(string.format("‚åõ C√≤n %d ph√∫t %d gi√¢y n·ªØa s·∫Ω hop...", minutes, seconds))
			end
		end
	end
end

-- B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh
local hasPreviousTime = LoadLastHopTime()
InitialCheck()

if hasPreviousTime then
	AutoHopTimer()
else
	print("üïí ƒê√¢y l√† l·∫ßn ƒë·∫ßu ch·ªçn server ho·∫∑c file tr·ªëng. B·∫Øt ƒë·∫ßu t√≠nh t·ª´ b√¢y gi·ªù.")
end
